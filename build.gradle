apply plugin: "base"
apply plugin:  "groovy"
apply plugin:  "maven"


apply from: "versions.gradle"


if (hasProperty('conf')) {
    System.err.print "Using configuration data from ${conf}"
    File confFile = new File(conf)
    if (! confFile.exists()) {
        throw new Exception("No configuration file ${conf} found.")
    }
    apply from: conf

} else {
    File confFile = new File("conf.gradle")
    if (! confFile.exists()) {
        throw new Exception("No configuration file ${conf} found.")
    }
    println "Using default configuration in 'conf.gradle'"
    apply from: "conf.gradle"
}




if (hasProperty('pub')) {
    System.err.print "Using publication configuration from ${pub}"
    File confFile = new File(pub)
    if (! confFile.exists()) {
        throw new Exception("No configuration file ${pub} found.")
    }
    apply from: pub

} else {
    File confFile = new File("pubconf.gradle")
    if (! confFile.exists()) {
        throw new Exception("No configuration file 'pubconf.gradle' found.")
    }
    println "Using default configuration in 'pubconf.gradle'"
    apply from: "pubconf.gradle"
}



group = "edu.holycross.shot"
version = '0.3.6'


repositories {
    mavenCentral()
    maven {
        url "http://beta.hpcc.uh.edu/nexus/content/groups/public"
    }
}


dependencies {
    compile group: 'org.codehaus.groovy', name: 'groovy-all', version: groovyversion

    compile group: 'commons-io', name: 'commons-io', version: commonsioversion

    compile group: 'net.sf.opencsv', name: 'opencsv', version : opencsvversion

    compile group: 'edu.harvard.chs', name : 'cite' , version: citeversion

    compile group: 'com.thaiopensource', name:'jing', version: jingversion

    testCompile group: 'junit', name: 'junit', version: junitversion
    testCompile group :'xmlunit', name: 'xmlunit', version: xmlunitversion

}


uploadArchives {
    repositories.mavenDeployer {
        repository(url: nexusRepo) {                   
            authentication (userName: nexusUser, password: nexusPassword)
        }
    }
}


task cleanTest () {
    doLast {
        File out1 = new File("testdata/testoutput")
        if (out1.exists()) { 
            out1.listFiles().each { f ->
                System.err.println "Delete " + f
                f.delete()
            }
            out1.delete() 
        }
        out1.mkdir()
    }
}
