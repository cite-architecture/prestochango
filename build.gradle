
import com.github.rjeschke.txtmark.*
import org.apache.tools.ant.filters.*

apply plugin: "base"
apply plugin:  "groovy"
apply plugin:  "maven"


apply from: "versions.gradle"


if (hasProperty('conf')) {
    System.err.print "Using configuration data from ${conf}"
    File confFile = new File(conf)
    if (! confFile.exists()) {
        throw new Exception("No configuration file ${conf} found.")
    }
    apply from: conf

} else {
    File confFile = new File("conf.gradle")
    if (! confFile.exists()) {
        throw new Exception("No configuration file ${conf} found.")
    }
    println "Using default configuration in 'conf.gradle'"
    apply from: "conf.gradle"
}




if (hasProperty('pub')) {
    System.err.print "Using publication configuration from ${pub}"
    File confFile = new File(pub)
    if (! confFile.exists()) {
        throw new Exception("No configuration file ${pub} found.")
    }
    apply from: pub

} else {
    File confFile = new File("pubconf.gradle")
    if (! confFile.exists()) {
        throw new Exception("No configuration file 'pubconf.gradle' found.")
    }
    println "Using default configuration in 'pubconf.gradle'"
    apply from: "pubconf.gradle"
}



group = "edu.holycross.shot"
version = '2.2.6'


buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath group: 'com.github.rjeschke', name: 'txtmark', version: '0.11'
  }
}

repositories {
    mavenCentral()
    maven {
        url "http://beta.hpcc.uh.edu/nexus/content/groups/public"
    }
}


dependencies {
    compile group: 'org.codehaus.groovy', name: 'groovy-all', version: groovyversion

    compile group: 'commons-io', name: 'commons-io', version: commonsioversion

    //compile group: 'net.sf.opencsv', name: 'opencsv', version : opencsvversion

    compile group: 'edu.harvard.chs', name : 'cite' , version: citeversion

    compile group: 'com.thaiopensource', name:'jing', version: jingversion

    compile group: 'edu.holycross.shot', name: 'safecsv', version: safecsvversion

  testCompile 'junit:junit:4.11'
  testCompile 'org.concordion:concordion:1.4.4'
  testCompile group :'xmlunit', name: 'xmlunit', version: xmlunitversion

  //   testCompile group: 'junit', name: 'junit', version: junitversion
  // testCompile group :'xmlunit', name: 'xmlunit', version: xmlunitversion

}


uploadArchives {
    repositories.mavenDeployer {
        repository(url: nexusRepo) {
            authentication (userName: nexusUser, password: nexusPassword)
        }
    }
}


task cleanTest () {
    doLast {
        File out1 = new File("testdata/testoutput")
        if (out1.exists()) {
            out1.listFiles().each { f ->
                System.err.println "Delete " + f
                f.delete()
            }
            out1.delete()
        }
        out1.mkdir()
    }
}


// for specs with concordion:
/*
sourceSets {
    main {
        java {
            srcDir 'src'
        }
        resources {
            srcDir 'src'
        }
    }

//    test {
  //      java {
	//  srcDir "specs/java"
        //}
        //resources {
	 // srcDir "${buildDir}/specs"
       // }
   // }

}

task cpResources(type: Copy) {
  from "specs/resources"
  into "${buildDir}/specs"
}

task setUpResources(dependsOn: cpResources) {
}
setUpResources.doLast {
  println "READING FILE TREE FROM " + mdSrc
  FileTree tree = fileTree(mdSrc) {
    include "** / *.md"
  }
  tree.visit { f ->
    if (f.relativePath.isFile()) {
      File inFile = new File("${mdSrc}/${f.relativePath}")
      println "Need to work on " + inFile
      def segs = f.relativePath.getSegments()
      String treePath = "${buildDir}/specs"
      Integer limit =  segs.size() - 1
      segs.eachWithIndex { s, i ->
	if (i < limit) {
	  treePath = "${treePath}/${s}"
	  File nxtDir = new File(treePath)
	  if (! nxtDir.exists()) {
	    nxtDir.mkdir()
	  }
	}
      }
      File outDir = new File(treePath)
      String htmlFileName = f.relativePath.getLastName().replaceFirst(/.md$/,".html")
      File htmlFile = new File(outDir, htmlFileName)
      println "Created ${htmlFile}"

      String body = Processor.process(inFile.getText("UTF-8"),Configuration.DEFAULT)
      htmlFile.setText("${htmlPreface}${body}${htmlEnd}", "UTF-8")
    }
  }
}


test.dependsOn setUpResources
test {
    systemProperties 'concordion.output.dir': file("${buildDir}/concordion-results")

}

task addVersion(){
}
addVersion.doLast {
  tokenMap["version"] = version
  tokenMap["deps"] = """
    <tr><td>cite</td><td>${citeversion}</td></tr>
""".toString()
}


task conc(type: Copy, dependsOn: [test, addVersion]) {
  from "${buildDir}/concordion-results"
  into "${buildDir}/concordion-formatted"
  filter(ReplaceTokens, tokens: tokenMap)
}
*/
